{"version":3,"sources":["logo_90.png","aws-exports.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","awsmobile","aws_project_region","aws_content_delivery_bucket","aws_content_delivery_bucket_region","aws_content_delivery_url","aws_cognito_identity_pool_id","aws_cognito_region","aws_user_pools_id","aws_user_pools_web_client_id","oauth","aws_mobile_analytics_app_id","aws_mobile_analytics_app_region","aws_bots","aws_bots_config","name","alias","region","aws_app_analytics","Amplify","configure","awsconfig","myTheme","Object","objectSpread","AmplifyTheme","sectionHeader","backgroundColor","App","err","confirmation","alert","react_default","a","createElement","className","dist","title","theme","botName","welcomeMessage","onComplete","this","handleComplete","bind","clearOnComplete","conversationModeOn","voiceEnabled","href","target","rel","Component","withAuthenticator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+MC0BzBC,EAxBG,CACdC,mBAAsB,YACtBC,4BAA+B,sBAC/BC,mCAAsC,YACtCC,yBAA4B,gEAC5BC,6BAAgC,iDAChCC,mBAAsB,YACtBC,kBAAqB,sBACrBC,6BAAgC,6BAChCC,MAAS,GACTC,4BAA+B,mCAC/BC,gCAAmC,YACnCC,SAAY,SACZC,gBAAmB,CACf,CACIC,KAAQ,mBACRC,MAAS,UACTC,OAAU,cAGlBC,kBAAqB,0CCbzBC,EAAQC,UAAUC,GAElB,IAAMC,EAAOC,OAAAC,EAAA,EAAAD,CAAA,GACRE,eADQ,CAEXC,cAAcH,OAAAC,EAAA,EAAAD,CAAA,GACTE,eAAaC,cADL,CAEXC,gBAAiB,cAKfC,yLAEWC,EAAKC,GAClB,IAAID,EAMJ,MAAO,0DALLE,MAAM,4DAQT,OACDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAEnBH,EAAAC,EAAAC,cAAA,8CAKAF,EAAAC,EAAAC,cAACE,EAAA,QAAD,CACCC,MAAM,eACNC,MAAOhB,EACPiB,QAAQ,kBACRC,eAAe,qCACfC,WAAYC,KAAKC,eAAeC,KAAKF,MACrCG,iBAAiB,EACjBC,oBAAoB,EACpBC,cAAc,IAEff,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVa,KAAK,iCACLC,OAAO,SACPC,IAAI,uBAJN,gCA/BeC,aA6CHC,8BAAkBxB,GAAK,GCrDlByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2927d47f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_90.00c5ce77.png\";","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_content_delivery_bucket\": \"awsvoicebot-reactjs\",\n    \"aws_content_delivery_bucket_region\": \"us-east-1\",\n    \"aws_content_delivery_url\": \"http://awsvoicebot-reactjs.s3-website-us-east-1.amazonaws.com\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:5a3d9370-b34c-4439-8385-c1786ed55591\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_1mSef4kE5\",\n    \"aws_user_pools_web_client_id\": \"5o9l9rjr6qul198o6m56cgvcr9\",\n    \"oauth\": {},\n    \"aws_mobile_analytics_app_id\": \"fdb5324c5dfc4228ae9ac8b31dbacabe\",\n    \"aws_mobile_analytics_app_region\": \"us-east-1\",\n    \"aws_bots\": \"enable\",\n    \"aws_bots_config\": [\n        {\n            \"name\": \"BookTrip_reactjs\",\n            \"alias\": \"$LATEST\",\n            \"region\": \"us-east-1\"\n        }\n    ],\n    \"aws_app_analytics\": \"enable\"\n};\n\n\nexport default awsmobile;\n","import { withAuthenticator, ChatBot, AmplifyTheme} from 'aws-amplify-react';\nimport awsconfig from './aws-exports';\nimport logo from './logo_90.png';\nimport './App.css';\nimport React, { Component }  from 'react';\nimport Amplify from 'aws-amplify';;\n\n\n\nAmplify.configure(awsconfig);\n\nconst myTheme = {\n  ...AmplifyTheme,\n  sectionHeader: {\n    ...AmplifyTheme.sectionHeader,\n    backgroundColor: '#ff6600'\n  }\n};\n\n\nclass App extends Component {\n\t\n  handleComplete(err, confirmation) {\n    if (err) {\n      alert('Bot conversation failed')\n      return;\n    }\n\n    //alert('Success: ' + JSON.stringify(confirmation, null, 2));\n    return 'Trip booked. Thank you! what would you like to do next?';\n  }\n  render() {\n\t  return (\n\t\t<div className=\"App\">\n\t\t  <header className=\"App-header\">\n\t\t\t\n\t\t\t<p>\n\t\t\t  Welcome to AWS Bookworm Chatbot!.\n\t\t\t</p>\n\t\t\t\n\t\t\t\n\t\t\t<ChatBot\n\t\t\t\ttitle=\"Retailer Bot\"\n\t\t\t\ttheme={myTheme}\n\t\t\t\tbotName=\"retailersupport\"\n\t\t\t\twelcomeMessage=\"Welcome, how can I help you today?\"\n\t\t\t\tonComplete={this.handleComplete.bind(this)}\n\t\t\t\tclearOnComplete={false}\n\t\t\t\tconversationModeOn={false}\n\t\t\t\tvoiceEnabled={true}\n\t\t\t/>\n\t\t\t<a\n\t\t\t  className=\"App-link\"\n\t\t\t  href=\"https://testerpro.org/deepdata\"\n\t\t\t  target=\"_blank\"\n\t\t\t  rel=\"noopener noreferrer\"\n\t\t\t>\n\t\t\t  More with Bookworm.\n\t\t\t</a>\n\t\t  </header>\n\t\t</div>\n\t  );\n\t}\n}\n\nexport default withAuthenticator(App, true);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}